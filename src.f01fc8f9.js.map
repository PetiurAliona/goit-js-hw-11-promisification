{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","id","logSuccess","logError","warn"],"mappings":";AAKA,MAAMA,EAAQC,GACL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACTF,EAAQF,IACPA,KAKDK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ;;ACZjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,EAAUC,KAK3CA,EAJqBF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,KAM3Db,EAASc,GAAgBZ,QAAQa,MAAMD;;ACf7C,MAAME,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzC/B,MAAAA,EAAQsB,EAA0B,IAAK,KAE7CjB,WAAW,KACUoB,KAAKE,SAAW,GAGjCG,EAAUD,EAAYG,GAAIhC,GAE1B+B,EAAQF,EAAYG,KAErBhC,IAGCiC,EAAa,CAACD,EAAIzB,KACtBC,QAAQC,mBAAmBuB,kBAAmBzB,QAG1C2B,EAAWF,IACfxB,QAAQ2B,qCAAqCH;;AC1B/C,aAFA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.f01fc8f9.js","sourceRoot":"../src","sourcesContent":["// Напиши функцию `delay(ms)`, которая возвращает промис, переходящий в состояние\n// `\"resolved\"` через `ms` миллисекунд. Значением исполнившегося промиса должно\n// быть то кол-во миллисекунд которое передали во время вызова функции `delay`.\n\n\nconst delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n\n  });\n}\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцию `toggleUserState()` так, чтобы она не использовала\n// callback-функцию `callback`, а принимала всего два параметра `allUsers` и\n// `userName` и возвращала промис.\n\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  callback(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Должно работать так\n//  */\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n","// Перепиши функцию `makeTransaction()` так, чтобы она не использовала\n// callback-функции `onSuccess` и `onError`, а принимала всего один параметр\n// `transaction` и возвращала промис.\n\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess(transaction.id, delay);\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};","import './js/task-1'\nimport './js/task-2'\nimport './js/task-3'"]}